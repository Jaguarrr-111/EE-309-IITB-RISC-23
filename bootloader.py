import assembler

skeleton_start = \
"""
-- this file was autogenerated using bootloader.py
-- see that file for usage details


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity instructionMemory is
    port(
        clk : in std_logic;
        address : in std_logic_vector(15 downto 0);
        instruction : out std_logic_vector(15 downto 0)
    );
end entity instructionMemory;

architecture instructions of instructionMemory is
    type instructionMemoryDataType is array (0 to 255) of std_logic_vector(7 downto 0);
    signal instructionMemoryData : instructionMemoryDataType := (
"""

skeleton_end = \
"""   
    );
begin 
instruction(15 downto 8) <= instructionMemoryData(to_integer(unsigned(address)));
instruction(7 downto 0) <= instructionMemoryData(to_integer(unsigned(address))+1);
end architecture instructions;
"""


def main():

    outputfile = open('instructionMem.vhdl', 'w')

    import sys
    try:
        import sys
        if len(sys.argv) == 1:
            print('no input file specified')
            print('usage: `python assembler.py <file>`')
            print('** ABORT **')
            return 1
        file_name = sys.argv[1]
        with open(file_name) as f:
            lines = f.readlines()
    except:
        print(f'"{file_name}": no such file in directory')
        print('** ABORT **')
        return 2
    
    instructions = []

    for i, line in enumerate(lines):
        line = line.split(';')[0].strip()
        if line:
            try:
                instructions.append(''.join(assembler.assemble(line)))
            except ValueError as e:
                print(f'In file "{file_name}": ERROR on line {i+1}: {e.args[0]}')
                print('** ABORT **')
                return 1
    
    instructions.extend([''.join(assembler.assemble('beq r1, r2, 1'))] * (128 - len(instructions)))
    print(skeleton_start, file=outputfile)
    for i, inst in enumerate(instructions):
        if i == len(instructions) -1 :
            print(f'\t\t"{inst[:8]}", "{inst[8:]}"', file=outputfile)
        else:
            print(f'\t\t"{inst[:8]}", "{inst[8:]}",', file=outputfile)
    print(skeleton_end, file=outputfile)
    

    return 0


if __name__ == '__main__':
    main()